#!/bin/bash

# AVGC Tender Management System - Deployment Script
# This script helps deploy the entire system to Kubernetes

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="avgc-tender-system"
KUBECTL="kubectl"

# Functions
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check kubectl
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed. Please install kubectl first."
        exit 1
    fi
    
    # Check cluster connection
    if ! kubectl cluster-info &> /dev/null; then
        print_error "Cannot connect to Kubernetes cluster. Please check your kubeconfig."
        exit 1
    fi
    
    print_status "Prerequisites check passed."
}

create_namespace() {
    print_status "Creating namespace ${NAMESPACE}..."
    kubectl apply -f namespace.yaml
}

deploy_secrets() {
    print_status "Deploying secrets..."
    print_warning "Make sure you have updated the secrets with your actual values!"
    read -p "Have you updated the secrets? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_error "Please update secrets.yaml with your actual values before deploying."
        exit 1
    fi
    kubectl apply -f secrets.yaml
}

deploy_databases() {
    print_status "Deploying databases..."
    kubectl apply -f postgres-deployment.yaml
    kubectl apply -f mongodb-deployment.yaml
    kubectl apply -f redis-deployment.yaml
    kubectl apply -f elasticsearch-deployment.yaml
    
    print_status "Waiting for databases to be ready..."
    kubectl wait --for=condition=ready pod -l app=postgres -n ${NAMESPACE} --timeout=300s
    kubectl wait --for=condition=ready pod -l app=mongodb -n ${NAMESPACE} --timeout=300s
    kubectl wait --for=condition=ready pod -l app=redis -n ${NAMESPACE} --timeout=300s
}

deploy_message_queue() {
    print_status "Deploying message queue..."
    kubectl apply -f rabbitmq-deployment.yaml
    
    print_status "Waiting for RabbitMQ to be ready..."
    kubectl wait --for=condition=ready pod -l app=rabbitmq -n ${NAMESPACE} --timeout=300s
}

deploy_services() {
    print_status "Deploying microservices..."
    kubectl apply -f auth-service-deployment.yaml
    kubectl apply -f tender-service-deployment.yaml
    kubectl apply -f document-service-deployment.yaml
    kubectl apply -f notification-service-deployment.yaml
    kubectl apply -f emd-service-deployment.yaml
    kubectl apply -f security-service-deployment.yaml
    kubectl apply -f reporting-service-deployment.yaml
    
    print_status "Waiting for services to be ready..."
    sleep 30
}

deploy_api_gateway() {
    print_status "Deploying API Gateway..."
    kubectl apply -f api-gateway-deployment.yaml
    
    print_status "Waiting for API Gateway to be ready..."
    kubectl wait --for=condition=ready pod -l app=api-gateway -n ${NAMESPACE} --timeout=300s
}

deploy_frontend() {
    print_status "Deploying frontend..."
    kubectl apply -f frontend-deployment.yaml
    
    print_status "Waiting for frontend to be ready..."
    kubectl wait --for=condition=ready pod -l app=frontend -n ${NAMESPACE} --timeout=300s
}

deploy_monitoring() {
    print_status "Deploying monitoring stack..."
    kubectl apply -f prometheus-deployment.yaml
    kubectl apply -f grafana-deployment.yaml
}

deploy_security() {
    print_status "Deploying RBAC and Network Policies..."
    kubectl apply -f rbac.yaml
    kubectl apply -f network-policies.yaml
}

deploy_ingress() {
    print_status "Deploying Ingress..."
    kubectl apply -f ingress.yaml
}

check_deployment() {
    print_status "Checking deployment status..."
    echo
    echo "Pods:"
    kubectl get pods -n ${NAMESPACE}
    echo
    echo "Services:"
    kubectl get svc -n ${NAMESPACE}
    echo
    echo "Ingress:"
    kubectl get ingress -n ${NAMESPACE}
    echo
}

# Main deployment flow
main() {
    print_status "Starting AVGC Tender Management System deployment..."
    
    check_prerequisites
    
    case "${1:-all}" in
        all)
            create_namespace
            deploy_secrets
            deploy_databases
            deploy_message_queue
            deploy_services
            deploy_api_gateway
            deploy_frontend
            deploy_monitoring
            deploy_security
            deploy_ingress
            ;;
        namespace)
            create_namespace
            ;;
        secrets)
            deploy_secrets
            ;;
        databases)
            deploy_databases
            ;;
        services)
            deploy_services
            ;;
        monitoring)
            deploy_monitoring
            ;;
        ingress)
            deploy_ingress
            ;;
        check)
            check_deployment
            exit 0
            ;;
        *)
            echo "Usage: $0 [all|namespace|secrets|databases|services|monitoring|ingress|check]"
            exit 1
            ;;
    esac
    
    check_deployment
    
    print_status "Deployment completed successfully!"
    echo
    echo "You can access the application at:"
    echo "  - Frontend: https://avgc-tenders.com"
    echo "  - API: https://api.avgc-tenders.com"
    echo "  - WebSocket: wss://ws.avgc-tenders.com"
}

# Run main function
main "$@"